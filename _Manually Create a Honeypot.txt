### Step 1 - Create a python script to log info
~~~
!@NetOps
sudo tee /usr/local/bin/tcp-honeypot.py > /dev/null <<'PY'
~~~

<br>

~~~
#!/usr/bin/env python3
"""
Simple TCP honeypot:
 - listens on given host:port
 - logs connections (timestamp, src ip:port)
 - dumps raw bytes to per-session files (hexdump + printable)
 - safe for use as a non-root service (binds high ports by default)
"""
import asyncio
import datetime
import os
import argparse
import binascii
import pathlib

BASE_LOG = "/var/log/tcp-honeypot"
os.makedirs(BASE_LOG, exist_ok=True)

def hexdump(data: bytes) -> str:
    hexs = binascii.hexlify(data).decode('ascii')
    lines = []
    for i in range(0, len(hexs), 32):
        chunk = hexs[i:i+32]
        b = bytes.fromhex(chunk)
        printable = ''.join((chr(x) if 32 <= x < 127 else '.') for x in b)
        lines.append(f"{i//2:08x}  {chunk}  {printable}")
    return "\n".join(lines)

async def handle(reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
    peer = writer.get_extra_info('peername')
    if peer is None:
        peer = ("unknown",0)
    ip, port = peer[0], peer[1]
    start = datetime.datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    sess_name = f"{start}_{ip.replace(':','_')}_{port}"
    sess_dir = pathlib.Path(BASE_LOG) / sess_name
    sess_dir.mkdir(parents=True, exist_ok=True)
    meta_file = sess_dir / "meta.txt"
    with meta_file.open("w") as mf:
        mf.write(f"start: {start}\npeer: {ip}:{port}\n")
    print(f"[+] connection from {ip}:{port} -> {sess_dir}")

    # optional initial bait (comment out if you don't want data sent)
    try:
        writer.write(b"Welcome\r\n")
        await writer.drain()
    except Exception:
        pass

    raw_file = sess_dir / "raw.bin"
    hexd_file = sess_dir / "hexdump.txt"
    try:
        with raw_file.open("ab") as rb, hexd_file.open("a") as hf:
            while True:
                data = await asyncio.wait_for(reader.read(4096), timeout=300.0)
                if not data:
                    break
                ts = datetime.datetime.utcnow().isoformat() + "Z"
                rb.write(data)
                hf.write(f"\n-- {ts} --\n")
                hf.write(hexdump(data) + "\n")
                # record printable copy
                printable = ''.join((chr(x) if 32 <= x < 127 else '.') for x in data)
                (sess_dir / "printable.log").open("a").write(f"{ts} {printable}\n")
                # optional: send tarpitted response (slow)
                try:
                    writer.write(b"OK\r\n")
                    await writer.drain()
                except Exception:
                    break
    except asyncio.TimeoutError:
        print(f"[-] connection timed out {ip}:{port}")
    except Exception as e:
        print(f"[-] session error {e}")
    finally:
        try:
            writer.close()
            await writer.wait_closed()
        except Exception:
            pass
        end = datetime.datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
        with meta_file.open("a") as mf:
            mf.write(f"end: {end}\n")
        print(f"[+] closed {ip}:{port} -> {sess_dir}")

async def main(host, port):
    server = await asyncio.start_server(handle, host, port)
    addrs = ", ".join(str(sock.getsockname()) for sock in server.sockets)
    print(f"Listening on {addrs}")
    async with server:
        await server.serve_forever()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", default="0.0.0.0")
    parser.add_argument("--port", type=int, default=2222)
    args = parser.parse_args()
    try:
        asyncio.run(main(args.host, args.port))
    except KeyboardInterrupt:
        pass
PY
~~~

<br>

~~~
!@NetOps
mkdir /var/log/tcp-honeypot
~~~

<br>

~~~
!@NetOps
sudo chmod +x /usr/local/bin/tcp-honeypot.py
~~~

<br>

### Step 2 - Create a Systemd service entry
~~~
!@NetOps
sudo useradd -r -s /sbin/nologin honeypot || true
sudo chown -R honeypot:honeypot /var/log/tcp-honeypot
~~~

<br>

~~~
!@NetOps
sudo tee /etc/systemd/system/tcp-honeypot.service > /dev/null <<'UNIT'
~~~

<br>

~~~
[Unit]
Description=Simple TCP Honeypot
After=network.target

[Service]
User=honeypot
Group=honeypot
ExecStart=/usr/local/bin/tcp-honeypot.py --host 0.0.0.0 --port 2222
Restart=on-failure
RestartSec=5
TimeoutStopSec=10
ProtectSystem=full
ProtectHome=yes
NoNewPrivileges=yes
PrivateTmp=yes
PrivateNetwork=no
ReadOnlyPaths=/usr
AmbientCapabilities=
SystemCallFilter=~@clock @cpu-emulation

[Install]
WantedBy=multi-user.target
UNIT
~~~

<br>

~~~
!@NetOps
sudo systemctl daemon-reload
sudo systemctl enable tcp-honeypot.service
sudo systemctl status tcp-honeypot.service --no-pager
~~~
